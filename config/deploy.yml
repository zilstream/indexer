# Name of your application. Used to uniquely configure containers.
service: zilstream-indexer

# Name of the container image.
image: melvinbeemer/zilstream-indexer

# Deploy to these servers.
servers:
  web:
    hosts:
      - indexer

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: v2-api.zilstream.com
  app_port: 8080
  healthcheck:
    interval: 15
    path: /health
    timeout: 15

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: ghcr.io
  username: melvinbeemer

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64
  # Pass in additional build args needed for your Dockerfile.
  # args:
  #   RUBY_VERSION: <%= ENV["RBENV_VERSION"] || ENV["rvm_ruby_string"] || "#{RUBY_ENGINE}-#{RUBY_ENGINE_VERSION}" %>

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  clear:
    # 172.17.0.1 is the default bridge address that maps back to the host from containers.
    # Change this if your host uses a different docker bridge or you prefer a static LAN IP.
    INDEXER_DATABASE_HOST: 172.17.0.1
    INDEXER_DATABASE_NAME: zilstream
    INDEXER_DATABASE_PORT: 6432
    INDEXER_DATABASE_USER: postgres
    INDEXER_DATABASE_PASSWORD: zilstream
# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal app logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"

# Use a different ssh user than root
#
# ssh:
#   user: app

# Uncomment if you need persistent storage
# volumes:
#   - "app_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Accessories example (uncomment/configure if you want Kamal to manage DB/Redis)
# accessories:
#   db:
#     image: postgres:15
#     host: 192.168.0.2
#     port: 5432
#     env:
#       clear:
#         POSTGRES_DB: stream
#       secret:
#         - POSTGRES_PASSWORD
#     directories:
#       - data:/var/lib/postgresql/data
#   redis:
#     image: valkey/valkey:8
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
